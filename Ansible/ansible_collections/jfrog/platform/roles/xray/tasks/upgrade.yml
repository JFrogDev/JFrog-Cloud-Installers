---
- debug:
    msg: "Performing upgrade of Xray version to {{ xray_version }}..."

- name: stop xray
  become: yes
  systemd:
    name: "{{ xray_daemon }}"
    state: stopped

- name: download xray for upgrade
  become: yes
  unarchive:
    src: "{{ xray_tar }}"
    dest: "{{ jfrog_home_directory }}"
    remote_src: yes
    owner: "{{ xray_user }}"
    group: "{{ xray_group }}"
    creates: "{{ xray_untar_home }}"

  register: downloadxray
  until: downloadxray is succeeded
  retries: 3

- name: Delete xray app
  become: yes
  file:
    path: "{{ xray_home }}/app"
    state: absent

- name: Copy new app to xray app
  become: yes
  command: "cp -r {{ xray_untar_home }}/app/. {{ xray_home }}/app"

- name: Upgrade rabbitmq
  import_tasks: rabbitmq/upgrade/RedHat.yml
  when: ansible_os_family == 'RedHat'

- name: Upgrade rabbitmq
  import_tasks: rabbitmq/upgrade/Debian.yml
  when: ansible_os_family == 'Debian'

- name: Check if install.sh wrapper script exist
  become: yes
  stat:
    path: "{{ xray_install_script_path }}/install.sh"
  register: install_wrapper_script

- name: Include interactive installer scripts
  include_vars: script/archive.yml

- name: Install xray
  include_tasks: expect.yml
  vars:
    exp_executable_cmd: "./install.sh -u {{ xray_user }} -g {{ xray_group }}"
    exp_dir: "{{ xray_install_script_path }}"
    exp_scenarios: "{{ xray_installer_scenario['main'] }}"
  args: 
    apply:
      environment: 
        YQ_PATH: "{{ xray_thirdparty_path }}/yq" 
  when: install_wrapper_script.stat.exists
  ignore_errors: yes

- name: Configure rabbitmq config
  become: yes
  template:
    src: "rabbitmq.conf.j2"
    dest: "{{ xray_home }}/app/bin/rabbitmq/rabbitmq.conf"
  notify: restart xray

- name: Configure systemyaml
  become: yes
  template:
    src: "{{ xray_system_yaml_template }}"
    dest: "{{ xray_home }}/var/etc/system.yaml"
  notify: restart xray

- name: configure installer info
  become: yes
  template:
    src: installer-info.json.j2
    dest: "{{ xray_home }}/var/etc/info/installer-info.json"
  notify: restart xray

- name: Ensure permissions are correct
  become: yes
  file:
    path: "{{ jfrog_home_directory }}"
    state: directory
    owner: "{{ xray_user }}"
    group: "{{ xray_group }}"
    recurse: yes

- name: Install xray as a service
  become: yes
  shell: |
    {{ xray_archive_service_cmd }}
  args:
    chdir: "{{ xray_install_script_path }}"
  register: check_service_status_result
  ignore_errors: yes

- name: Restart xray
  meta: flush_handlers

- name : wait for xray to be fully deployed  
  uri: url=http://127.0.0.1:8082/router/api/v1/system/health timeout=130
  register: result
  until: result.status == 200
  retries: 25
  delay: 5